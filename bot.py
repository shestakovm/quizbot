from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_IDS
from database import Database
from logger import MessageLogger
from questions import QUESTIONS, INFO_POSTS, reset_times
from utils import notify_admin, get_moscow_time, is_admin
from scheduler import Scheduler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import asyncio
from datetime import datetime
scheduler_task = None
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database()
logger = MessageLogger()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
last_hint_request = {}

class QuizStates(StatesGroup):
    registration = State()
    answering = State()



def create_options_keyboard(options: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    keyboard = []
    for option in options:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º option –∏ callback_data —Ä–∞–≤–Ω–æ–π —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É
        keyboard.append([InlineKeyboardButton(text=option, callback_data=option)])
    return InlineKeyboardMarkup(keyboard)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await logger.log_message(message)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        try:
            with open('welcomepicture.jpg', 'rb') as photo:
                await message.answer_photo(photo)
        except Exception as e:
            logging.error(f"Failed to send welcome image: {e}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = """–ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è –æ–∂–∏–¥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–≤–∏–∑-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ö–∏—Ç–∞—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∑–∞–≥–∞–¥–∫–∏ –∏ —Ä–∞–∑–≥–∞–¥–∞—Ç—å, –∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã.\n
–¢–µ, –∫—Ç–æ —Å–æ–±–µ—Ä—É—Ç –≤—Å–µ –∫—É—Å–æ—á–∫–∏ –∑–∞–≥–∞–¥–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑–æ–≤—É—Ç –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ, –ø–æ–ª—É—á–∞—Ç ¬´–∑–æ–ª–æ—Ç–æ–π¬ª –±–∏–ª–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–µ–∑–¥–∫–∏ –≤ –ö–∏—Ç–∞–π –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /rules"""

        registration_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –æ—Ñ–∏—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –û—Å–µ–Ω—å"

        await message.answer(welcome_text)
        await message.answer(registration_text)
        await QuizStates.registration.set()

    except Exception as e:
        error_msg = f"Error in start command: {e}"
        logging.error(error_msg)
        await notify_admin(bot, error_msg)
        await message.answer(welcome_text)
        await message.answer(registration_text)
        await QuizStates.registration.set()

@dp.message_handler(commands=['rules'], state='*')  # state='*' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def cmd_rules(message: types.Message, state: FSMContext):  # –¥–æ–±–∞–≤–ª—è–µ–º state –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await logger.log_message(message)

    rules_text = """–ó–∞–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã.

–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –æ—Ç–≤–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç, —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–¥—É–º–∞–π—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ.\n –≠—Ç–æ—Ç –∫–≤–∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É —ç—Ä—É–¥–∏—Ü–∏—é, –Ω–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫"""

    await message.answer(rules_text)

@dp.message_handler(commands=['admin'],  state='*')
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        users = await db.get_all_users()
        total_users = len(users)
        final_answers = await db.get_all_final_answers()
        total_final = len(final_answers)

        stats = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–∞:

–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}
–§–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total_final}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:"""

        for user_id, answer, time in final_answers[:300]:
            user_data = await db.get_user_statistics(user_id)
            stats += f"\n- –£—á–∞—Å—Ç–Ω–∏–∫ {user_id}: {answer} ({time})"

        await message.answer(stats)
    except Exception as e:
        error_msg = f"Error getting admin statistics: {e}"
        logging.error(error_msg)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message_handler(state=QuizStates.registration)
async def process_registration(message: types.Message, state: FSMContext):
    await logger.log_message(message)

    user_data = message.text.split()
    if len(user_data) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        full_name = " ".join(user_data[:-1])
        office = user_data[-1]

        try:
            await db.register_user(
                user_id=message.from_user.id,
                full_name=full_name,
                office=office
            )
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            await state.finish()
            await QuizStates.answering.set()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            current_time = get_moscow_time()
            active_question = None
            question_id = None

            for qid, question in QUESTIONS.items():
                if question['start_time'] <= current_time <= question['end_time']:
                    active_question = question
                    question_id = qid
                    break

            if active_question:
                if await db.check_if_answered(message.from_user.id, question_id):
                    await message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π!")
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                if 'question_image' in active_question:
                    with open(active_question['question_image'], 'rb') as photo:
                        await message.answer_photo(photo, caption=active_question['text'])
                elif 'video_path' in active_question:
                    with open(active_question['video_path'], 'rb') as video:
                        await message.answer_video(video, caption=active_question['text'])
                else:
                    await message.answer(active_question['text'])

                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                if 'options' in active_question:
                    keyboard = create_options_keyboard(active_question['options'])
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", reply_markup=keyboard)
                else:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", reply_markup=ReplyKeyboardRemove())

                # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –ø–æ–¥—Å–∫–∞–∑–∫–µ
                if question_id == 2:
                    hint_info = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {active_question['hint_delay'] // 60} –º–∏–Ω—É—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hint –¥–ª—è –µ—ë –ø–æ–ª—É—á–µ–Ω–∏—è."
                    await message.answer(hint_info)
            else:
                await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await notify_admin(bot, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n–ò–º—è: {full_name}\n–û—Ñ–∏—Å: {office}")

        except Exception as e:
            error_msg = f"Error during registration: {e}"
            logging.error(error_msg)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –æ—Ñ–∏—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

@dp.message_handler(commands=['hint'], state='*')
async def cmd_hint(message: types.Message):
    await logger.log_message(message)

    current_time = get_moscow_time()
    question_2 = QUESTIONS[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    if not (question_2['start_time'] <= current_time <= question_2['end_time']):
        await message.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!")
        return

    user_id = message.from_user.id
    time_passed = current_time - question_2['start_time']

    if time_passed.total_seconds() < question_2['hint_delay']:
        remaining_time = question_2['hint_delay'] - time_passed.total_seconds()
        minutes = int(remaining_time // 60)
        await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    await message.answer(question_2['hint'])


@dp.callback_query_handler(state=QuizStates.answering)
async def process_callback_answer(callback_query: types.CallbackQuery, state: FSMContext):
    await logger.log_message(callback_query.message)

    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await callback_query.answer()

    current_time = get_moscow_time()
    active_question = None
    question_id = None

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏...
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        for qid, question in QUESTIONS.items():
            if question['start_time'] <= current_time <= question['end_time']:
                active_question = question
                question_id = qid
                break

        if not active_question:
            await callback_query.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        if await db.check_if_answered(callback_query.from_user.id, question_id):
            next_question = None
            next_time = None
            for qid, q in QUESTIONS.items():
                if qid > question_id:
                    next_question = q
                    next_time = q['start_time']
                    break

            if next_time:
                time_str = next_time.strftime('%H:%M:%S')
                await callback_query.message.answer(
                    f"–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {time_str}")
            else:
                await callback_query.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π.")
            return

        user_answer = callback_query.data.lower().strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        is_correct = user_answer == active_question['correct_answer']
        await db.save_answer(
            user_id=callback_query.from_user.id,
            question_id=question_id,
            answer=user_answer,
            is_correct=is_correct
        )

        if is_correct:
            await callback_query.message.answer(active_question['correct_answer_text'])
            if 'image_correct' in active_question:
                with open(active_question['image_correct'], 'rb') as photo:
                    await callback_query.message.answer_photo(photo)
        else:
            await callback_query.message.answer(active_question['wrong_answer_text'])

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        await callback_query.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        error_msg = f"Error processing callback answer: {e}"
        logging.error(error_msg)
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await notify_admin(bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {callback_query.from_user.id}: {e}")

# @dp.callback_query_handler(state=QuizStates.answering)
# async def process_callback_answer(callback_query: types.CallbackQuery, state: FSMContext):
#     await logger.log_message(callback_query.message)
#
#     current_time = get_moscow_time()
#     active_question = None
#     question_id = None
#
#     # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
#     for qid, question in QUESTIONS.items():
#         if question['start_time'] <= current_time <= question['end_time']:
#             active_question = question
#             question_id = qid
#             break
#
#     if not active_question:
#         await callback_query.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
#         await callback_query.answer()
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
#     if await db.check_if_answered(callback_query.from_user.id, question_id):
#         next_question = None
#         next_time = None
#         for qid, q in QUESTIONS.items():
#             if qid > question_id:
#                 next_question = q
#                 next_time = q['start_time']
#                 break
#
#         if next_time:
#             time_str = next_time.strftime('%H:%M:%S')
#             await callback_query.message.answer(
#                 f"–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {time_str}")
#         else:
#             await callback_query.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π.")
#         await callback_query.answer()
#         return
#
#     user_answer = callback_query.data.lower().strip()
#
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
#         is_correct = user_answer == active_question['correct_answer']
#         await db.save_answer(
#             user_id=callback_query.from_user.id,
#             question_id=question_id,
#             answer=user_answer,
#             is_correct=is_correct
#         )
#
#         if is_correct:
#             await callback_query.message.answer(active_question['correct_answer_text'])
#             if 'image_correct' in active_question:
#                 with open(active_question['image_correct'], 'rb') as photo:
#                     await callback_query.message.answer_photo(photo)
#         else:
#             await callback_query.message.answer(active_question['wrong_answer_text'])
#
#         # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
#         await callback_query.message.edit_reply_markup(reply_markup=None)
#
#     except Exception as e:
#         error_msg = f"Error processing callback answer: {e}"
#         logging.error(error_msg)
#         await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
#         await notify_admin(bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {callback_query.from_user.id}: {e}")
#
#     finally:
#         await callback_query.answer()



@dp.message_handler(lambda message: not message.text.startswith('/'), state=QuizStates.answering)
async def process_answer(message: types.Message):


    await logger.log_message(message)

    current_time = get_moscow_time()
    active_question = None
    question_id = None

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    for qid, question in QUESTIONS.items():
        if question['start_time'] <= current_time <= question['end_time']:
            active_question = question
            question_id = qid
            break

    if not active_question:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
    if await db.check_if_answered(message.from_user.id, question_id):
        next_question = None
        next_time = None
        for qid, q in QUESTIONS.items():
            if qid > question_id:
                next_question = q
                next_time = q['start_time']
                break

        if next_time:
            time_str = next_time.strftime('%H:%M:%S')
            await message.answer(f"–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {time_str}")
        else:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π.")
        return

    user_answer = message.text.lower().strip()

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å (6-–π)
        if question_id == 6:
            await db.save_answer(
                user_id=message.from_user.id,
                question_id=question_id,
                answer=user_answer,
                is_correct=None  # –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            )
            await message.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã 12 —Ñ–µ–≤—Ä–∞–ª—è.")
            return

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        is_correct = user_answer == active_question['correct_answer']
        await db.save_answer(
            user_id=message.from_user.id,
            question_id=question_id,
            answer=user_answer,
            is_correct=is_correct
        )

        if is_correct:
            await message.answer(active_question['correct_answer_text'])
            if 'image_correct' in active_question:
                with open(active_question['image_correct'], 'rb') as photo:
                    await message.answer_photo(photo)
        else:
            await message.answer(active_question['wrong_answer_text'])

    except Exception as e:
        error_msg = f"Error processing answer: {e}"
        logging.error(error_msg)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await notify_admin(bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {message.from_user.id}: {e}")


async def main():
    try:
        global scheduler_task  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.init()

        # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logging.info("Resetting question times...")
        reset_times()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        await notify_admin(bot, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        logging.info("Creating scheduler...")
        scheduler = Scheduler(bot, db)
        logging.info("Starting scheduler...")
        scheduler_task = asyncio.create_task(scheduler.start())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        logging.info("Scheduler task created")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("Starting polling...")
        await dp.start_polling()

    except Exception as e:
        logging.error(f"Critical error: {e}", exc_info=True)
        await notify_admin(bot, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped")
    except Exception as e:
        logging.error(f"Fatal error: {e}")