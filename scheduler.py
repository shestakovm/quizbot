from aiogram import Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from questions import QUESTIONS, INFO_POSTS
from utils import notify_admin, get_moscow_time
import asyncio
from datetime import datetime
import pytz
import logging


class Scheduler:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db
        self.running = True
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.last_log_time = datetime.now(self.moscow_tz)
        logging.info("Scheduler initialized")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("Schedule loop is starting...")
        try:
            while self.running:
                current_time = datetime.now(self.moscow_tz)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
                time_diff = (current_time - self.last_log_time).total_seconds()
                should_log = time_diff >= 3600  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å

                if should_log:
                    logging.info(f"=== Scheduler check at {current_time} ===")
                    self.last_log_time = current_time

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await self.db.get_all_users()
                if should_log:
                    logging.info(f"Total registered users: {len(users)}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                for q_id, question in QUESTIONS.items():
                    if should_log:
                        logging.info(f"\nChecking question {q_id}:")
                        logging.info(f"Start time: {question['start_time']}")
                        logging.info(f"End time: {question['end_time']}")
                        logging.info(f"Current time: {current_time}")
                        logging.info(f"Is notified: {question.get('notified', False)}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–µ –±—ã–ª –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    if (question['start_time'] <= current_time <= question['end_time'] and
                            not question.get('notified', False)):
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ start_time
                        if current_time >= question['start_time']:
                            logging.info(f"Time to send question {q_id}!")
                            await self._send_question(q_id)
                            question['notified'] = True
                            logging.info(f"Question {q_id} marked as notified")

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
                            await notify_admin(self.bot,
                                               f"üéØ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å {q_id}\n"
                                               f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                               f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {question['end_time'].strftime('%Y-%m-%d %H:%M:%S')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ–ø–æ—Å—Ç—ã
                for post_id, post in INFO_POSTS.items():
                    if should_log:
                        logging.info(f"\nChecking info post {post_id}:")
                        logging.info(f"Publish time: {post['publish_time']}")
                        logging.info(f"Current time: {current_time}")
                        logging.info(f"Is notified: {post.get('notified', False)}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–µ –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    if (current_time >= post['publish_time'] and
                            not post.get('notified', False)):
                        logging.info(f"Time to send info post {post_id}!")
                        await self._send_info_post(post_id)
                        post['notified'] = True
                        logging.info(f"Info post {post_id} marked as notified")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ñ–æ–ø–æ—Å—Ç–∞
                        await notify_admin(self.bot,
                                           f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏–Ω—Ñ–æ–ø–æ—Å—Ç {post_id}\n"
                                           f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                await asyncio.sleep(30)

        except Exception as e:
            logging.error(f"Error in schedule loop: {e}", exc_info=True)
            await notify_admin(self.bot, f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

    async def _send_question(self, question_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = await self.db.get_all_users()
            question = QUESTIONS[question_id]

            logging.info(f"Sending question {question_id} to {len(users)} users")

            for user_id in users:
                try:
                    logging.info(f"Sending to user {user_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
                    if 'question_image' in question:
                        try:
                            with open(question['question_image'], 'rb') as photo:
                                await self.bot.send_photo(
                                    user_id,
                                    photo,
                                    caption=question['text']
                                )
                                logging.info(f"Sent photo to user {user_id}")
                        except Exception as e:
                            logging.error(f"Failed to send photo, sending text only: {e}")
                            await self.bot.send_message(user_id, question['text'])

                    elif 'video_path' in question:
                        try:
                            with open(question['video_path'], 'rb') as video:
                                await self.bot.send_video(
                                    user_id,
                                    video,
                                    caption=question['text']
                                )
                                logging.info(f"Sent video to user {user_id}")
                        except Exception as e:
                            logging.error(f"Failed to send video, sending text only: {e}")
                            await self.bot.send_message(user_id, question['text'])

                    else:
                        await self.bot.send_message(user_id, question['text'])
                        logging.info(f"Sent text to user {user_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if 'options' in question:
                        keyboard = InlineKeyboardMarkup()
                        for option in question['options']:
                            keyboard.add(InlineKeyboardButton(text=option, callback_data=option))
                        await self.bot.send_message(
                            user_id,
                            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                            reply_markup=keyboard
                        )
                        logging.info(f"Sent inline keyboard to user {user_id}")

                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                    if question_id == 2:
                        hint_info = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {question['hint_delay'] // 60} –º–∏–Ω—É—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hint –¥–ª—è –µ—ë –ø–æ–ª—É—á–µ–Ω–∏—è."
                        await self.bot.send_message(user_id, hint_info)
                        logging.info(f"Sent hint info to user {user_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    await asyncio.sleep(0.1)

                except Exception as e:
                    logging.error(f"Error sending to user {user_id}: {e}", exc_info=True)
                    await notify_admin(self.bot, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ {question_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logging.error(f"Error in _send_question: {e}", exc_info=True)
            await notify_admin(self.bot, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ {question_id}: {e}")

    async def _send_info_post(self, post_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = await self.db.get_all_users()
            post = INFO_POSTS[post_id]
            logging.info(f"Sending info post {post_id} to {len(users)} users")

            for user_id in users:
                try:
                    logging.info(f"Sending to user {user_id}")

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∏
                    if 'image_path' in post:
                        try:
                            with open(post['image_path'], 'rb') as photo:
                                await self.bot.send_photo(user_id, photo, caption=post['text'])
                                logging.info(f"Sent photo with caption to user {user_id}")
                        except Exception as e:
                            logging.error(f"Failed to send photo with caption: {e}")
                            await self.bot.send_message(user_id, post['text'])
                    else:
                        await self.bot.send_message(user_id, post['text'])
                        logging.info(f"Sent text to user {user_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    await asyncio.sleep(0.1)

                except Exception as e:
                    logging.error(f"Error sending info post to user {user_id}: {e}")
                    await notify_admin(self.bot, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ–ø–æ—Å—Ç–∞ {post_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logging.error(f"Error in _send_info_post: {e}")
            await notify_admin(self.bot, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ–ø–æ—Å—Ç–∞ {post_id}: {e}")